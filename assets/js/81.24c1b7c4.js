(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{430:function(t,a,s){"use strict";s.r(a);var e=s(40),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"正则-入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则-入门"}},[t._v("#")]),t._v(" 正则 - 入门")]),t._v(" "),s("h3",{attrs:{id:"遇到的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遇到的问题"}},[t._v("#")]),t._v(" 遇到的问题")]),t._v(" "),s("p",[t._v("正则表达式主要用来做一些校验（限制和验证输入的合法性），可以改变输入字符串的顺序，也可以在搜索的时候用来秀一下，偶尔使用，每次都查资料，所以整理一份入门指南方便查阅。")]),t._v(" "),s("h2",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("正则表达式是用语匹配字符串中字符组合的模式。在 JavaScript 中，正则表达式也是对象。这些模式被用于 "),s("code",[t._v("RegExp")]),t._v(" 的 exec 和 test 方法，以及 "),s("code",[t._v("String")]),t._v(" 的 match、matchAll、replace、search 和 split 方法。")]),t._v(" "),s("h2",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("p",[t._v("字面量，构造函数和工厂函数都是可以创建正则表达式的：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/pattern/flags\nnew RegExp(pattern [, flags])\nRegExp(pattern [, flags])\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("参数：")]),t._v(" "),s("p",[s("code",[t._v("pattern")]),t._v(" 正则表达式的文本")]),t._v(" "),s("p",[s("code",[t._v("flags")]),t._v(" 修饰符。如果指定，标志可以具有以下值的任意组合")]),t._v(" "),s("ul",[s("li",[t._v("g 全局匹配;找到所有匹配，而不是在第一个匹配后停止")]),t._v(" "),s("li",[t._v("i 忽略大小写")]),t._v(" "),s("li",[t._v("m 多行; 将开始和结束字符（^和$）视为在多行上工作（也就是，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。")]),t._v(" "),s("li",[t._v("u Unicode; 将模式视为Unicode序列点的序列。不加的时候可以匹配小于 "),s("code",[t._v("\\uFFFF")]),t._v(" 的 unicode 字符，大于的则需要添加 u 修饰符。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^.$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\uD842\\uDFB7"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//false  "\\uD842\\uDFB7"是一个四个字节的UTF-16编码，代表一个字符')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\uD842\\uDFB7"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("61")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("61")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用u修饰符，正则表达式能够识别大括号{}表示的Unicode字符，否则无法识别，{61}也会被解读为量词，表示61 的u字符。")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("但是需要注意，"),s("code",[t._v("u")]),t._v(" 修饰符是 ES6 新增，截止至2019/11/05，兼容性如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/reg-1.png",alt:" 修饰符兼容性"}})]),t._v(" "),s("ul",[s("li",[t._v("y 粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。")]),t._v(" "),s("li",[t._v("s dotAll模式，匹配任何字符（包括终止符 '\\n'）。")])]),t._v(" "),s("h2",{attrs:{id:"特殊字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),s("h4",{attrs:{id:"字符类别-character-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符类别-character-classes"}},[t._v("#")]),t._v(" 字符类别（Character Classes）")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v(".")])]),t._v(" "),s("td",[t._v("(点号，小数点) 匹配任意单个字符，但是行结束符除外："),s("code",[t._v("\\n")]),t._v(" "),s("code",[t._v("\\r")]),t._v(" "),s("code",[t._v("\\u2028")]),t._v(" 或 "),s("code",[t._v("\\u2029")]),t._v("。"),s("br"),t._v("在字符集中，点( . )失去其特殊含义，并匹配一个字面点( . )。"),s("br"),t._v("需要注意的是，"),s("code",[t._v("m")]),t._v(" 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用 "),s("code",[t._v("[^]")]),t._v(" （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符。"),s("br"),t._v("例如，"),s("code",[t._v("/.y/")]),t._v(' 匹配 "yes make my day" 中的 "my" 和 "ay"，但是不匹配 "yes"。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\d")])]),t._v(" "),s("td",[t._v("匹配任意阿拉伯数字。等价于 "),s("code",[t._v("[0-9]")]),t._v("。"),s("br"),t._v("例如，"),s("code",[t._v("/\\d/")]),t._v(" 或 "),s("code",[t._v("/[0-9]/")]),t._v(" 匹配 \"B2 is the suite number.\" 中的 '2'。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\D")])]),t._v(" "),s("td",[t._v("匹配任意一个不是阿拉伯数字的字符。等价于"),s("code",[t._v("[^0-9]")]),t._v("。"),s("br"),t._v("例如，"),s("code",[t._v("/\\D/")]),t._v(" 或 "),s("code",[t._v("/[^0-9]/")]),t._v(" 匹配 \"B2 is the suite number.\" 中的 'B'。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\w")])]),t._v(" "),s("td",[t._v("匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 "),s("code",[t._v("[A-Za-z0-9_]")]),t._v("。"),s("br"),t._v("例如，/\\w/ 匹配 \"apple\" 中的 'a'，\"$5.28\" 中的 '5' 和 \"3D\" 中的 '3'。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\W")])]),t._v(" "),s("td",[t._v("匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 "),s("code",[t._v("[^A-Za-z0-9_]")]),t._v("。"),s("br"),t._v("例如，"),s("code",[t._v("/\\W/")]),t._v(" 或 "),s("code",[t._v("/[^A-Za-z0-9_]/")]),t._v(" 匹配 \"50%\" 中的 '%'。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\s")])]),t._v(" "),s("td",[t._v("匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。"),s("br"),t._v("等价于 "),s("code",[t._v("[ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​​\\u202f\\u205f​ \\u3000]")]),t._v("。"),s("br"),t._v("例如 "),s("code",[t._v("/\\s\\w*/")]),t._v(" 匹配 \"foo bar\" 中的 ' bar'。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\S")])]),t._v(" "),s("td",[t._v("匹配一个非空白符。等价于 "),s("code",[t._v("[^ \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]")]),t._v("。"),s("br"),t._v("例如，"),s("code",[t._v("/\\S\\w*/")]),t._v(" 匹配 \"foo bar\" 中的 'foo'。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\t")])]),t._v(" "),s("td",[t._v("匹配一个水平制表符（tab）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\r")])]),t._v(" "),s("td",[t._v("匹配一个回车符（carriage return）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\n")])]),t._v(" "),s("td",[t._v("匹配一个换行符（linefeed）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\v")])]),t._v(" "),s("td",[t._v("匹配一个垂直制表符（vertical tab）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\f")])]),t._v(" "),s("td",[t._v("匹配一个换页符（form-feed）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("[\\b]")])]),t._v(" "),s("td",[t._v("匹配一个退格符（backspace）（不要与 \\b 混淆）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\0")])]),t._v(" "),s("td",[t._v("匹配一个 NUL 字符。不要在此后面跟小数点。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\cX")])]),t._v(" "),s("td",[s("code",[t._v("X")]),t._v(" 是 "),s("code",[t._v("A - Z")]),t._v(" 的一个字母。匹配字符串中的一个"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6/6913704",target:"_blank",rel:"noopener noreferrer"}},[t._v("控制字符"),s("OutboundLink")],1),t._v("。 "),s("br"),t._v("例如，/\\cM/ 匹配字符串中的 control-M。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\xhh")])]),t._v(" "),s("td",[t._v("匹配编码为 hh （两个十六进制数字）的字符。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\uhhhh")])]),t._v(" "),s("td",[t._v("匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\")])]),t._v(" "),s("td",[t._v("对于那些通常被认为字面意义的字符来说，表示下一个字符具有特殊用处，并且不会被按照字面意义解释。"),s("br"),t._v("例如 "),s("code",[t._v("/b/")]),t._v(" 匹配字符 'b'。在 b 前面加上一个反斜杠，即使用 "),s("code",[t._v("/\\b/")]),t._v("，则该字符变得特殊，以为这匹配一个单词边界。"),s("br"),t._v("或"),s("br"),t._v("对于那些通常特殊对待的字符，表示下一个字符不具有特殊用途，会被按照字面意义解释。"),s("br"),t._v("例如，"),s("code",[t._v("*")]),t._v(" 是一个特殊字符，表示匹配某个字符 0 或多次，如 "),s("code",[t._v("/a*/")]),t._v(' 意味着 0 或多个 "a"。 为了匹配字面意义上的 '),s("code",[t._v("*")]),t._v(" ，在它前面加上一个反斜杠，例如，"),s("code",[t._v("/a\\*/")]),t._v(" 匹配 'a*'。")])])])]),t._v(" "),s("h4",{attrs:{id:"字符集合-character-sets"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符集合-character-sets"}},[t._v("#")]),t._v(" 字符集合（Character Sets）")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("[xyz]")])]),t._v(" "),s("td",[t._v("一个字符集合，也叫字符组。匹配集合中的任意一个字符。你可以使用连字符'-'指定一个范围。"),s("br"),t._v("例如，"),s("code",[t._v("[abcd]")]),t._v(" 等价于 "),s("code",[t._v("[a-d]")]),t._v("，匹配\"brisket\"中的'b'和\"chop\"中的'c'。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("[^xyz]")])]),t._v(" "),s("td",[t._v("一个反义或补充字符集，也叫反义字符组。也就是说，它匹配任意不在括号内的字符。你也可以通过使用连字符 '-' 指定一个范围内的字符。"),s("br"),t._v("例如，"),s("code",[t._v("[^abc]")]),t._v(" 等价于 "),s("code",[t._v("[^a-c]")]),t._v("。 第一个匹配的是 \"bacon\" 中的'o' 和 \"chop\" 中的 'h'。")])])])]),t._v(" "),s("h4",{attrs:{id:"边界-boundaries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#边界-boundaries"}},[t._v("#")]),t._v(" 边界（Boundaries）")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("^")])]),t._v(" "),s("td",[t._v("匹配输入开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。"),s("br"),t._v("例如，"),s("code",[t._v("/^A/")]),t._v(' 不匹配 "an A" 中的 "A"，但匹配 "An A" 中的 "A"。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("$")])]),t._v(" "),s("td",[t._v("匹配输入结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。"),s("br"),t._v("例如，"),s("code",[t._v("/t$/")]),t._v(' 不匹配 "eater" 中的 "t"，但匹配 "eat" 中的 "t"。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\b")])]),t._v(" "),s("td",[t._v("匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 "),s("code",[t._v("[\\b]")]),t._v(" 混淆）"),s("br"),t._v('例如，/\\bno/ 匹配 "at noon" 中的 "no"，/ly\\b/ 匹配 "possibly yesterday." 中的 "ly"。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\B")])]),t._v(" "),s("td",[t._v("匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。"),s("br"),t._v("例如，"),s("code",[t._v("/\\Bon/")]),t._v(' 匹配 "at noon" 中的 "on"，'),s("code",[t._v("/ye\\B/")]),t._v(' 匹配 "possibly yesterday." 中的 "ye"。')])])])]),t._v(" "),s("h4",{attrs:{id:"分组-grouping-与反向引用-back-references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组-grouping-与反向引用-back-references"}},[t._v("#")]),t._v(" 分组（Grouping）与反向引用（back references）")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("(x)")]),t._v(" "),s("td",[t._v("匹配 x 并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。"),s("br"),t._v("例如，"),s("code",[t._v("/(foo)/")]),t._v(' 匹配且捕获 "foo bar." 中的 "foo"。被匹配的子字符串可以在结果数组的元素 [1], ..., [n] 中找到，或在被定义的 RegExp 对象的属性 $1, ..., $9 中找到。捕获组（Capturing groups）有性能惩罚。如果不需再次访问被匹配的子字符串，最好使用非捕获括号（non-capturing parentheses），见下面。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("\\n")])]),t._v(" "),s("td",[t._v("n 是一个正整数。一个反向引用（back reference），指向正则表达式中第 n 个括号（从左开始数）中匹配的子字符串。"),s("br"),t._v("例如，"),s("code",[t._v("/apple(,)\\sorange\\1/")]),t._v(' 匹配 "apple, orange, cherry, peach." 中的 "apple,orange,"。一个更全面的例子在该表格下面。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("(?:x)")])]),t._v(" "),s("td",[t._v("匹配 "),s("code",[t._v("x")]),t._v(" 不会捕获匹配项。这被称为非捕获括号（non-capturing parentheses）。匹配项不能够从结果数组的元素 [1], ..., [n] 或已被定义的 RegExp 对象的属性 $1, ..., $9 再次访问到。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("(?<name>x)")])]),t._v(" "),s("td",[t._v("分组命名，和普通的分组 (x) 相比增加了 "),s("code",[t._v("?<name>")]),t._v(" ，之后就可以通过名字来引用啦。"),s("br"),t._v("反向引用一个命名分组的语法是 "),s("code",[t._v("\\k<name>")]),t._v("，注意命名分组同样可以通过数字索引来反向引用，比如："),s("br"),s("code",[t._v('/(?<foo>a)\\k<foo>\\1/.test("aaa") // true')]),s("br"),t._v("在 replace() 方法的替换字符串中反向引用是用 "),s("code",[t._v("$<name>")]),t._v("："),s("br"),s("code",[t._v('"abc".replace(/(?<foo>a)/, "$<foo>-") // "a-bc"，同样 $1 仍然可用')])])])])]),t._v(" "),s("h4",{attrs:{id:"数量词-quantifiers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数量词-quantifiers"}},[t._v("#")]),t._v(" 数量词(Quantifiers)")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("x*")])]),t._v(" "),s("td",[t._v("匹配前面的模式 "),s("code",[t._v("x")]),t._v(" 0 或多次。"),s("br"),t._v("例如，"),s("code",[t._v("/bo*/")]),t._v(' 匹配 "A ghost booooed" 中的 "boooo"，"A bird warbled" 中的 "b"，但是不匹配 "A goat grunted"。')])]),t._v(" "),s("tr",[s("td",[t._v("x+")]),t._v(" "),s("td",[t._v("匹配前面的模式 "),s("code",[t._v("x")]),t._v(" 1 或多次。等价于 "),s("code",[t._v("{1,}")]),t._v("。"),s("br"),t._v("例如，"),s("code",[t._v("/a+/")]),t._v(' 匹配 "candy" 中的 "a"，"caaaaaaandy" 中所有的 "a"。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("x*?")]),s("br"),s("code",[t._v("x+?")])]),t._v(" "),s("td",[t._v("像上面的 "),s("code",[t._v("*")]),t._v(" 和 "),s("code",[t._v("+")]),t._v(" 一样匹配前面的模式 "),s("code",[t._v("x")]),t._v("，然而匹配是最小可能匹配。"),s("br"),t._v("例如，"),s("code",[t._v('/".*?"/')]),t._v(' 匹配 \'"foo" "bar"\' 中的 \'"foo"\'，而 '),s("code",[t._v("*")]),t._v(" 后面没有 "),s("code",[t._v("?")]),t._v(' 时匹配 \'"foo" "bar"\'。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("x?")])]),t._v(" "),s("td",[t._v("匹配前面的模式 "),s("code",[t._v("x")]),t._v(" 0 或 1 次。"),s("br"),t._v("例如，"),s("code",[t._v("/e?le?/")]),t._v(' 匹配 "angel" 中的 "el"，"angle" 中的 "le"。'),s("br"),t._v("如果在数量词 "),s("code",[t._v("*")]),t._v("、"),s("code",[t._v("+")]),t._v("、"),s("code",[t._v("?")]),t._v(" 或 "),s("code",[t._v("{}")]),t._v(", 任意一个后面紧跟该符号（"),s("code",[t._v("?")]),t._v("），会使数量词变为非贪婪（ non-greedy） ，即匹配次数最小化。反之，默认情况下，是贪婪的（greedy），即匹配次数最大化。"),s("br"),t._v("在使用于向前断言（lookahead assertions）时，见该表格中 ("),s("code",[t._v("?=")]),t._v(")、("),s("code",[t._v("?!")]),t._v(") 和 ("),s("code",[t._v("?:")]),t._v(") 的说明。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("x(?=y)")])]),t._v(" "),s("td",[t._v("只有当 "),s("code",[t._v("x")]),t._v(" 后面紧跟着 "),s("code",[t._v("y")]),t._v(" 时，才匹配 "),s("code",[t._v("x")]),t._v("。 例如，"),s("code",[t._v("/Jack(?=Sprat)/")]),t._v(" 只有在 'Jack' 后面紧跟着 'Sprat' 时，才会匹配它。"),s("code",[t._v("/Jack(?=Sprat")]),t._v("|"),s("code",[t._v(")Frost)/")]),t._v(" 只有在 'Jack' 后面紧跟着 'Sprat' 或 'Frost' 时，才会匹配它。然而，'Sprat' 或 'Frost' 都不是匹配结果的一部分。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("x(?!y)")])]),t._v(" "),s("td",[t._v("只有当 "),s("code",[t._v("x")]),t._v(" 后面不是紧跟着 "),s("code",[t._v("y")]),t._v(" 时，才匹配 "),s("code",[t._v("x")]),t._v("。例如，"),s("code",[t._v("/\\d+(?!\\.)/")]),t._v(" 只有当一个数字后面没有紧跟着一个小数点时，才会匹配该数字。"),s("code",[t._v('/\\d+(?!\\.)/.exec("3.141")')]),t._v(" 匹配 141 而不是 3.141。")])]),t._v(" "),s("tr",[s("td",[t._v("x|y")]),t._v(" "),s("td",[t._v("匹配 "),s("code",[t._v("x")]),t._v(" 或 "),s("code",[t._v("y")]),s("br"),t._v('例如，/green|red/ 匹配 "green apple" 中的 ‘green\'，"red apple." 中的 \'red\'。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("x{n}")])]),t._v(" "),s("td",[t._v("n 是一个正整数。前面的模式 x 连续出现 n 次时匹配。"),s("br"),t._v("例如，"),s("code",[t._v("/a{2}/")]),t._v(' 不匹配 "candy," 中的 "a"，但是匹配 "caandy," 中的两个 "a"，且匹配 "caaandy." 中的前两个 "a"。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("x{n,}")])]),t._v(" "),s("td",[t._v("n 是一个正整数。前面的模式 x 连续出现至少 n 次时匹配。"),s("br"),t._v("例如，"),s("code",[t._v("/a{2,}/")]),t._v(' 不匹配 "candy" 中的 "a"，但是匹配 "caandy" 和 "caaaaaaandy." 中所有的 "a"。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("x{n,m}")])]),t._v(" "),s("td",[t._v("n 和 m 为正整数。前面的模式 x 连续出现至少 n 次，至多 m 次时匹配。"),s("br"),t._v("例如，"),s("code",[t._v("/a{1,3}/")]),t._v(' 不匹配 "cndy"，匹配 "candy," 中的 "a"，"caandy," 中的两个 "a"，匹配 "caaaaaaandy" 中的前面三个 "a"。注意，当匹配 "caaaaaaandy" 时，即使原始字符串拥有更多的 "a"，匹配项也是 "aaa"。')])])])]),t._v(" "),s("h4",{attrs:{id:"断言-assertions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#断言-assertions"}},[t._v("#")]),t._v(" 断言（Assertions）")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字符")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("x(?=y)")])]),t._v(" "),s("td",[t._v("先行断言，仅匹配被y跟随的x。"),s("br"),t._v("举个例子，"),s("code",[t._v("/Jack(?=Sprat)/")]),t._v('，如果"Jack"后面跟着 "Sprat" ，则匹配之。'),s("br"),t._v(' /Jack(?=Sprat|Frost)/ ，如果"Jack"后面跟着"Sprat"或者"Frost"，则匹配之。但是，"Sprat" 和"Frost" 都不会在匹配结果中出现。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("x(?!y)")])]),t._v(" "),s("td",[t._v("先行否定断言，仅匹配不被y跟随的x。"),s("br"),t._v("举个例子，"),s("code",[t._v("/\\d+(?!\\.)/")]),t._v(" 只会匹配不被点（.）跟随的数字。"),s("code",[t._v("/\\d+(?!\\.)/.exec('3.141')")]),t._v(' 匹配"141"，而不是"3.141"')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("(?<=y)x")])]),t._v(" "),s("td",[t._v("后行断言，仅匹配跟随在y后面的x。"),s("br"),t._v("举个例子，"),s("code",[t._v("/(?<=\\$)\\d+/")]),t._v(" ，只会匹配在 $ 符号后面的数字。"),s("code",[t._v("/(?<=\\$)\\d+/.exec('1.There is $100 taped underneath your seat.')")]),t._v(' 匹配"100"。没有 "1"')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("(?<!y)x")])]),t._v(" "),s("td",[t._v("后行否定断言，仅匹配不跟随在y后面的x。"),s("br"),t._v("举个例子，"),s("code",[t._v("/(?<!\\$)\\d+/")]),t._v("，只会匹配不在 $ 符号后面的数字。"),s("code",[t._v("/(?<!\\$)\\d+/.exec('1.There is $100 taped underneath your seat.')")]),t._v(' 匹配"1"。没有 "100"')])])])]),t._v(" "),s("h2",{attrs:{id:"子表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#子表达式"}},[t._v("#")]),t._v(" 子表达式")]),t._v(" "),s("p",[t._v("从简单到复杂的正则表达式演变通常要采用分组、回溯引用和逻辑处理的思想。利用这三种规则，可以推演出无限复杂的正则表达式。")]),t._v(" "),s("h4",{attrs:{id:"分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[t._v("#")]),t._v(" 分组")]),t._v(" "),s("p",[t._v("分组体现在：所有以"),s("code",[t._v("(")]),t._v("和"),s("code",[t._v(")")]),t._v("元字符所包含的正则表达式被分为一组，每一个分组都是一个子表达式，它也是构成高级正则表达式的基础。如果只是使用简单的"),s("code",[t._v("(regex)")]),t._v("匹配语法本质上和不分组是一样的，如果要发挥它强大的作用，往往要结合回溯引用的方式。")]),t._v(" "),s("h4",{attrs:{id:"回溯引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回溯引用"}},[t._v("#")]),t._v(" 回溯引用")]),t._v(" "),s("p",[t._v("所谓回溯引用（backreference）指的是模式的后面部分引用前面的子表达式。可以把它当成是变量，回溯引用的语法像\\1,\\2,....,其中\\1表示引用的第一个子表达式，\\2表示引用的第二个子表达式，以此类推。而\\0则表示整个表达式。在表达式里面 "),s("code",[t._v("\\1")]),t._v(" 引用第一个子表达式，在结果里面 "),s("code",[t._v("$1")]),t._v(" 引用匹配到的第一个子表达式对应的字符串。")]),t._v(" "),s("p",[t._v("假设现在要在下面这个文本里匹配两个连续相同的单词，你要怎么做呢？")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello what what is the first thing, and I am am scq000.'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("利用回溯引用，我们可以很容易地写出"),s("code",[t._v("\\b(\\w+)\\s\\1")]),t._v("这样的正则。")]),t._v(" "),s("p",[t._v("回溯引用在替换字符串中十分常用，语法上有些许区别，用$1,$2...来引用要被替换的字符串。下面以js代码作演示：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc abc 123'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(ab)c")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1g'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 得到结果 'abg abg 123'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果我们不想子表达式被引用，可以使用非捕获正则"),s("code",[t._v("(?:regex)")]),t._v("这样就可以避免浪费内存。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scq000'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(scq00)(?:0)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1,$2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回scq00,$2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于使用了非捕获正则，所以第二个引用没有值，这里直接替换为$2")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("有时，我们需要限制回溯引用的适用范围。那么通过先行断言和后行断言就可以达到这个目的。")]),t._v(" "),s("h4",{attrs:{id:"先行断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先行断言"}},[t._v("#")]),t._v(" 先行断言")]),t._v(" "),s("p",[t._v("先行断言(lookahead)是用来限制后缀的。凡是以"),s("code",[t._v("(?=regex)")]),t._v("包含的子表达式在匹配过程中都会用来限制前面的表达式的匹配。例如 happy happily 这两个单词，我想获得以 happ 开头的副词，那么就可以使用"),s("code",[t._v("happ(?=ily)")]),t._v("来匹配。如果我想过滤所有以happ开头的副词，那么也可以采用先行否定断言的正则 "),s("code",[t._v("happ(?!ily)")]),t._v("，就会匹配到happy单词的happ前缀。")]),t._v(" "),s("h4",{attrs:{id:"后行断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后行断言"}},[t._v("#")]),t._v(" 后行断言")]),t._v(" "),s("p",[t._v("后行断言(lookbehind)是通过指定一个子表达式，然后从符合这个子表达式的位置出发开始查找符合规则的字串。举个简单的例子： apple和people都包含ple这个后缀，那么如果我只想找到apple的ple，该怎么做呢？我们可以通过限制app这个前缀，就能唯一确定ple这个单词了。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<=app)ple")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("其中"),s("code",[t._v("(?<=regex)")]),t._v("的语法就是我们这里要介绍的后行断言。regex指代的子表达式会作为限制项进行匹配，匹配到这个子表达式后，就会继续向后查找。另外一种限制匹配是利用 "),s("code",[t._v("(?<!regex)")]),t._v(" 语法，这里称为后行否定断言。与后行断言不同的是，被指定的子表达式不能被匹配到。于是，在上面的例子中，如果想要查找apple的ple也可以这么写成/(?<!peo)ple。\nes2018 之后 js 才支持。所以低版本不兼容的时候，有一个思路是将字符串进行翻转，然后再使用先行断言，作完处理后再翻转回来。看一个简单的例子：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如我想替换apple的ple为ply")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apple people'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("elp(?=pa)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ylp'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[t._v("定义")]),t._v(" "),s("th",[t._v("正则")]),t._v(" "),s("th",[t._v("记忆方式")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("引用")]),t._v(" "),s("td",[t._v("\\0,\\1,\\2 和 $0, $1, $2")]),t._v(" "),s("td",[t._v("转义+数字")])]),t._v(" "),s("tr",[s("td",[t._v("引用")]),t._v(" "),s("td",[t._v("$&")]),t._v(" "),s("td",[t._v("最后匹配的字符")])]),t._v(" "),s("tr",[s("td",[t._v("引用")]),t._v(" "),s("td",[t._v("$`")]),t._v(" "),s("td",[t._v("匹配的字符左侧内容")])]),t._v(" "),s("tr",[s("td",[t._v("引用")]),t._v(" "),s("td",[t._v("$'")]),t._v(" "),s("td",[t._v("匹配的字符右侧内容")])]),t._v(" "),s("tr",[s("td",[t._v("非捕获组")]),t._v(" "),s("td",[t._v("(?: )")]),t._v(" "),s("td",[t._v("引用表达式(()), 本身不被消费(?),引用(: )")])]),t._v(" "),s("tr",[s("td",[t._v("先行断言")]),t._v(" "),s("td",[t._v("(?=)")]),t._v(" "),s("td",[t._v("引用子表达式(())，本身不被消费(?), 查找(=)")])]),t._v(" "),s("tr",[s("td",[t._v("先行否定断言")]),t._v(" "),s("td",[t._v("(?!)")]),t._v(" "),s("td",[t._v("引用子表达式(())，本身不被消费(?), 否定的查找(!)")])]),t._v(" "),s("tr",[s("td",[t._v("后行断言")]),t._v(" "),s("td",[t._v("(?<=)")]),t._v(" "),s("td",[t._v("引用子表达式(())，本身不被消费(?), 后行的(<，开口往后)，查找(=)")])]),t._v(" "),s("tr",[s("td",[t._v("后行否定断言")]),t._v(" "),s("td",[t._v("(?<!)")]),t._v(" "),s("td",[t._v("引用子表达式(())，本身不被消费(?), 后行的(<，开口往后)，否定的查找(!)")])])])]),t._v(" "),s("h4",{attrs:{id:"逻辑处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑处理"}},[t._v("#")]),t._v(" 逻辑处理")]),t._v(" "),s("p",[t._v("编程语言中用到的三种逻辑关系，与或非")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("逻辑关系")]),t._v(" "),s("th",[t._v("正则元字符")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("与")]),t._v(" "),s("td",[t._v("默认")])]),t._v(" "),s("tr",[s("td",[t._v("非")]),t._v(" "),s("td",[s("code",[t._v("[^regex]")]),t._v(" 和 "),s("code",[t._v("(?!regexp)")]),t._v(" / "),s("code",[t._v("(?<!regexp)")])])]),t._v(" "),s("tr",[s("td",[t._v("或")]),t._v(" "),s("td",[t._v("|")])])])]),t._v(" "),s("h2",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),s("h4",{attrs:{id:"replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" replace")]),t._v(" "),s("p",[t._v("语法：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("str.replace(regexp|substr, newSubStr|function);\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("参数：")]),t._v(" "),s("ul",[s("li",[t._v("regexp (pattern)")])]),t._v(" "),s("p",[t._v("一个RegExp 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。")]),t._v(" "),s("ul",[s("li",[t._v("substr (pattern)")])]),t._v(" "),s("p",[t._v("一个将被 newSubStr 替换的 字符串。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。")]),t._v(" "),s("ul",[s("li",[t._v("newSubStr (replacement)")])]),t._v(" "),s("p",[t._v("用于替换掉第一个参数在原字符串中的匹配部分的字符串。该字符串中可以内插一些特殊的变量名。参考下面的使用字符串作为参数。")]),t._v(" "),s("ul",[s("li",[t._v("function (replacement)")])]),t._v(" "),s("p",[t._v("一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果。参考下面的指定一个函数作为参数。")]),t._v(" "),s("p",[t._v("返回值：一个部分或全部匹配由替代模式所取代的新的字符串。")]),t._v(" "),s("h4",{attrs:{id:"使用字符串作为参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用字符串作为参数"}},[t._v("#")]),t._v(" 使用字符串作为参数")]),t._v(" "),s("p",[t._v("替换字符串可以插入下面的特殊变量名：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("变量名")]),t._v(" "),s("th",[t._v("代表的值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("$$")])]),t._v(" "),s("td",[t._v('插入一个 "$"。')])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("$&")])]),t._v(" "),s("td",[t._v("插入匹配的子串。")])]),t._v(" "),s("tr",[s("td",[t._v("$`")]),t._v(" "),s("td",[t._v("插入当前匹配的子串左边的内容。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("$'")])]),t._v(" "),s("td",[t._v("插入当前匹配的子串右边的内容。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("$n")])]),t._v(" "),s("td",[t._v("假如第一个参数是 RegExp对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串。提示：索引是从1开始")])])])]),t._v(" "),s("h4",{attrs:{id:"指定一个函数作为参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定一个函数作为参数"}},[t._v("#")]),t._v(" 指定一个函数作为参数")]),t._v(" "),s("p",[t._v("你可以指定一个函数作为第二个参数。在这种情况下，当匹配执行后，该函数就会执行。 函数的返回值作为替换字符串。(注意：上面提到的特殊替换参数在这里不能被使用。) 另外要注意的是，如果第一个参数是正则表达式，并且其为全局匹配模式，那么这个方法将被多次调用，每次匹配都会被调用。")]),t._v(" "),s("p",[t._v("下面是该函数的参数：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("变量名")]),t._v(" "),s("th",[t._v("代表的值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("match")])]),t._v(" "),s("td",[t._v("匹配的子串。（对应于上述的$&。）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("p1,p2, ...")])]),t._v(" "),s("td",[t._v("假如 "),s("code",[t._v("replace()")]),t._v(" 方法的第一个参数是一个 "),s("code",[t._v("RegExp")]),t._v(" 对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。）例如，如果是用 /(\\a+)(\\b+)/ 这个来匹配，p1 就是匹配的 \\a+，p2 就是匹配的 \\b+。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("offset")])]),t._v(" "),s("td",[t._v("匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是 'abcd'，匹配到的子字符串是 'bc'，那么这个参数将会是 1）")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("string")])]),t._v(" "),s("td",[t._v("被匹配的原字符串。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("NamedCaptureGroup")])]),t._v(" "),s("td",[t._v("命名捕获组匹配的对象")])])])]),t._v(" "),s("p",[t._v("(精确的参数个数依赖于 replace() 的第一个参数是否是一个正则表达式（RegExp）对象，以及这个正则表达式中指定了多少个括号子串，如果这个正则表达式里使用了命名捕获， 还会添加一个命名捕获的对象)")]),t._v(" "),s("p",[t._v("栗子: 使 newString 变成 'abc - 12345 - #$*%':")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replacer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p1 is nondigits, p2 digits, and p3 non-alphanumerics")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' - '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc12345#$*%'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("([^\\d]*)(\\d*)([^\\w]*)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" replacer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newString"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// abc - 12345 - #$*%")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h2",{attrs:{id:"思考栗子🌰"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思考栗子🌰"}},[t._v("#")]),t._v(" 思考栗子🌰")]),t._v(" "),s("h4",{attrs:{id:"使用正则改变数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用正则改变数据结构"}},[t._v("#")]),t._v(" 使用正则改变数据结构")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" re "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\w+)\\s(\\w+)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John Smith"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newstr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$2, $1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Smith, John"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"在多行中使用正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在多行中使用正则表达式"}},[t._v("#")]),t._v(" 在多行中使用正则表达式")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Please yes\\nmake my day!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("yes.*day")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns null")]),t._v("\ns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("yes[^]*day")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns 'yes\\nmake my day'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"使用正则表达式和-unicode-字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用正则表达式和-unicode-字符"}},[t._v("#")]),t._v(" 使用正则表达式和 Unicode 字符")]),t._v(" "),s("p",[t._v("正如上面表格提到的，\\w 或 \\W 只会匹配基本的 ASCII 字符；如 'a' 到 'z'、 'A' 到 'Z'、 0 到 9 及 '_'。为了匹配其他语言中的字符，如西里尔（Cyrillic）或 希伯来语（Hebrew），要使用 \\uhhhh，\"hhhh\" 表示以十六进制表示的字符的 Unicode 值。下例展示了怎样从一个单词中分离出 Unicode 字符。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" text "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Образец text на русском языке"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[\\u{0400}-\\u{04FF}]+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ug")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// prints "Образец"')]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// prints "7"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" match2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// prints "на" [did not print "text"]')]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// prints "15"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h4",{attrs:{id:"数字千分位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字千分位"}},[t._v("#")]),t._v(" 数字千分位")]),t._v(" "),s("p",[t._v("还记得有一次面试遇到数字处理千分位的问题，当时想到可以用正则的，但是想了一下没写出来。\n"),s("code",[t._v("1234")]),t._v(" > "),s("code",[t._v("1,234")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1234567'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d)(?=(?:\\d{3})+$)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1,'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nnum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d{1,3}(?=(\\d{3})+$)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$&,'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"}},[t._v("RegExp"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5cdcd42551882568651554e6",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式不要背"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/regex",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 6 入门 - 正则的扩展"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace",target:"_blank",rel:"noopener noreferrer"}},[t._v("String.prototype.replace()"),s("OutboundLink")],1)])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/ziyunfei/p/6761413.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS 正则中的命名捕获分组"),s("OutboundLink")],1)])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/ziyunfei/p/6098021.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("写正则不要再瞎转义了"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);