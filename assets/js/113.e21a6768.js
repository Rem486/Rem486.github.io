(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{463:function(t,i,v){"use strict";v.r(i);var _=v(40),e=Object(_.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"git-常用命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令"}},[t._v("#")]),t._v(" git - 常用命令")]),t._v(" "),v("p",[t._v("文档类，记录 git 常用命令")]),t._v(" "),v("h2",{attrs:{id:"git-基础概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-基础概念"}},[t._v("#")]),t._v(" git 基础概念")]),t._v(" "),v("ul",[v("li",[t._v("远程仓库：就是代码最终提交的归宿。")]),t._v(" "),v("li",[t._v("远端分支本地副本：主要储存了远程仓库各分支数据在本地的一个副本。可以打开项目下的 .git 文件，里面有个 refs/remotes，这里就主要存的就是远程仓库的分支信息，一般执行 push 或者 pull、fetch 都会往这里进行更新。")]),t._v(" "),v("li",[t._v("本地仓库：这里就是我们经常会打交道的区域，在执行 commit 之后，本质上就是提交到了这个区域。可以查看你的 .git 目录下的 refs/heads 目录，里面存的就是我们本地的分支代码信息。")]),t._v(" "),v("li",[t._v("暂存区：这个区域就是我们每次执行 git add 之后会存到的区域，用来与本地仓库之间做一个缓存，同时也是 Git 底层设计上来说也算是比较重要的一个区域，它能帮助 Git 在做 diff 的时候提高查找性能。")]),t._v(" "),v("li",[t._v("工作区：这个一般就是我们写代码的地方，比如 vscode 打开的项目，可以进行代码编辑的地方。")])]),t._v(" "),v("h2",{attrs:{id:"命令概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#命令概述"}},[t._v("#")]),t._v(" 命令概述")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git stash")])]),t._v(" "),v("li",[v("code",[t._v("git clone")])]),t._v(" "),v("li",[v("code",[t._v("git init")])]),t._v(" "),v("li",[v("code",[t._v("git remote")])]),t._v(" "),v("li",[v("code",[t._v("git branch")])]),t._v(" "),v("li",[v("code",[t._v("git checkout")])]),t._v(" "),v("li",[v("code",[t._v("git add")])]),t._v(" "),v("li",[v("code",[t._v("git commit")])]),t._v(" "),v("li",[v("code",[t._v("git rm")])]),t._v(" "),v("li",[v("code",[t._v("git push")])]),t._v(" "),v("li",[v("code",[t._v("git pull")])]),t._v(" "),v("li",[v("code",[t._v("git fetch")])]),t._v(" "),v("li",[v("code",[t._v("git merge")])]),t._v(" "),v("li",[v("code",[t._v("git log")])]),t._v(" "),v("li",[v("code",[t._v("git reset")])]),t._v(" "),v("li",[v("code",[t._v("git reflog")])]),t._v(" "),v("li",[v("code",[t._v("git revert")])]),t._v(" "),v("li",[v("code",[t._v("git cherry-pick")])]),t._v(" "),v("li",[v("code",[t._v("git tag")])]),t._v(" "),v("li",[v("code",[t._v("git rebase")])])]),t._v(" "),v("h2",{attrs:{id:"git-stash"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),v("p",[t._v("把暂存区的改动临时存储起来。")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git stash save 'xxx'")]),t._v("：储存变更，并命名 xxx")]),t._v(" "),v("li",[v("code",[t._v("git stash list")]),t._v("：查看储存区所有提交列表")]),t._v(" "),v("li",[v("code",[t._v("git stash pop")]),t._v("：弹出并应用最近的一次储存区的代码提交")]),t._v(" "),v("li",[v("code",[t._v("git stash drop stash@{n}")]),t._v("：删除某次储存记录，n 可以通过 "),v("code",[t._v("git reflog")]),t._v(" 查看")]),t._v(" "),v("li",[v("code",[t._v("git stash clear")]),t._v("：清除所有 stash 信息")])]),t._v(" "),v("blockquote",[v("p",[t._v("它的数据将被存在仓库 .git 文件下的 refs/stash 里。")])]),t._v(" "),v("h2",{attrs:{id:"git-clone"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-clone"}},[t._v("#")]),t._v(" git clone")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git clone xxx.git")]),t._v("：把一个仓库代码拉到本地")]),t._v(" "),v("li",[v("code",[t._v("git clone xxx.git -b branch1")]),t._v("：把一个仓库代码拉到本地之后，基于默认分支(main/master)创建新的分支")])]),t._v(" "),v("h2",{attrs:{id:"git-init"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-init"}},[t._v("#")]),t._v(" git init")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git init")]),t._v("：初始化一个 git 仓库，创建 git 配置到 .git 文件夹")])]),t._v(" "),v("h2",{attrs:{id:"git-remote"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-remote"}},[t._v("#")]),t._v(" git remote")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git remote add <name> <url>")]),t._v(": 添加一个远程版本库关联")]),t._v(" "),v("li",[v("code",[t._v("git remote rm <name>")]),t._v(": 删除某个远程版本库关联")])]),t._v(" "),v("p",[t._v("栗子："),v("RouterLink",{attrs:{to:"/web/tool/git-set-origin-url.html"}},[t._v("git - 配置/修改远程仓库地址")])],1),t._v(" "),v("h2",{attrs:{id:"git-branch"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git branch")]),t._v("：查看本地所有分支信息")]),t._v(" "),v("li",[v("code",[t._v("git branch -r")]),t._v("：查看远程仓库所有分支")]),t._v(" "),v("li",[v("code",[t._v("git branch -a")]),t._v("：查看本地和远程仓库所有分支")])]),t._v(" "),v("h2",{attrs:{id:"git-checkout"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout"}},[t._v("#")]),t._v(" git checkout")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git checkout -b branch1")]),t._v("：基于当前分支创建并切换到新分支")])]),t._v(" "),v("h2",{attrs:{id:"git-add"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add")]),t._v(" "),v("p",[t._v("添加工作区的文件到暂存区")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git add [file1] [file2]")]),t._v(": 添加一个或多个文件到暂存区")]),t._v(" "),v("li",[v("code",[t._v("git add .")]),t._v("：把当前目录下得所有文件改动都添加到暂存区")]),t._v(" "),v("li",[v("code",[t._v("git add -A")]),t._v("：把当前仓库内所有文件改动都添加到暂存区")])]),t._v(" "),v("h2",{attrs:{id:"git-commit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),v("p",[t._v("将暂存区文件提交到本地仓库")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git commit [file1] ... -m [message]")]),t._v("：将暂存区的内容提交到本地 git 版本仓库中")]),t._v(" "),v("li",[v("code",[t._v("git commit -am [message]")]),t._v(": 相当于 "),v("code",[t._v("git add -A")]),t._v(" 加 "),v("code",[t._v("git commit -m [message]")])])]),t._v(" "),v("h2",{attrs:{id:"git-rm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-rm"}},[t._v("#")]),t._v(" git rm")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git rm .env")]),t._v("：将 .env 文件从 git 仓库中删除")]),t._v(" "),v("li",[v("code",[t._v("git rm -r dist")]),t._v("：将 dist 文件夹从 git 仓库中删除")])]),t._v(" "),v("p",[t._v("如果已经 "),v("code",[t._v("git add")]),t._v(" 到暂存区了，那就需要 "),v("code",[t._v("(use --cached to keep the file, or -f to force removal)")])]),t._v(" "),v("h2",{attrs:{id:"git-push"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),v("p",[t._v("推送本地分支到远程仓库")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git push")]),t._v("：推送当前分支到远程仓库对应分支")]),t._v(" "),v("li",[v("code",[t._v("git push --set-upstream origin branch1")]),t._v("：推送当前分支到远程仓库 branch1 分支，并关联，下次可以直接使用 "),v("code",[t._v("git push")])])]),t._v(" "),v("h2",{attrs:{id:"git-pull"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" git pull")]),t._v(" "),v("p",[t._v("合并远程分支到本地分支")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git pull")]),t._v("：合并远程仓库对应分支到当前本地分支")]),t._v(" "),v("li",[v("code",[t._v("git pull origin branch1")]),t._v("：合并远程仓库 branch1 分支到当前本地分支")])]),t._v(" "),v("h2",{attrs:{id:"git-fetch"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-fetch"}},[t._v("#")]),t._v(" git fetch")]),t._v(" "),v("p",[t._v("获取远程仓库分支的最新代码，并不合并到本地仓库")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git fetch")]),t._v("：更新远程仓库分支，可以查看到远程分支最新的改动")]),t._v(" "),v("li",[v("code",[t._v("git fetch")]),t._v("：更新的时候，如果远程分支已经删了，那本地记录这边也删除对应的远程分支")])]),t._v(" "),v("h2",{attrs:{id:"git-merge"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git merge master")]),t._v("：合并 master 分支到当前分支")]),t._v(" "),v("li",[v("code",[t._v("git merge origin/master")]),t._v("：合并远程 master 分支到当前分支")])]),t._v(" "),v("h2",{attrs:{id:"git-log"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" git log")]),t._v(" "),v("p",[t._v("查看提交记录")]),t._v(" "),v("h2",{attrs:{id:"git-reset"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),v("p",[t._v("回退版本")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git reset [--soft | --mixed | --hard] [HEAD]")])])]),t._v(" "),v("h3",{attrs:{id:"关于-head"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于-head"}},[t._v("#")]),t._v(" 关于 HEAD")]),t._v(" "),v("ul",[v("li",[t._v("HEAD 表示当前版本")]),t._v(" "),v("li",[t._v("HEAD^ 上一个版本")]),t._v(" "),v("li",[t._v("HEAD^^ 上上一个版本")]),t._v(" "),v("li",[t._v("HEAD^^^ 上上上一个版本")]),t._v(" "),v("li",[t._v("HEAD~n 回撤 n 个版本，这种也是更加方便的")])]),t._v(" "),v("h3",{attrs:{id:"参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),v("p",[t._v("基于 "),v("code",[t._v("git reset HEAD^")]),t._v(" 进行说明。")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("--soft")]),t._v("：重置最新一次提交版本，不会修改暂存区和工作区。")]),t._v(" "),v("li",[v("code",[t._v("--mixed")]),t._v("：默认参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。")]),t._v(" "),v("li",[v("code",[t._v("--hard")]),t._v("：重置所有提交到上一个版本，并且修改工作区，会彻底回到上一个提交版本，在代码中看不到当前提交的代码，也就是工作区改动也被干掉了。")])]),t._v(" "),v("p",[t._v("栗子：")]),t._v(" "),v("ul",[v("li",[t._v("我改动了我的 README 文件，在我们的工作区就产生了一次改动，但是这个时候还没有提交到暂存区，在 status 里会显示为工作区修改的标记")]),t._v(" "),v("li",[t._v("接着我们执行 git add，这个时候你查看暂存区，会发现这次改动被提交进去了，同时被 status 标记为已被提交至暂存区")]),t._v(" "),v("li",[t._v("然后再执行 git commit，这个时候就完成了一次提交")])]),t._v(" "),v("p",[t._v("接下来我们想撤回这次提交，以上三种参数所体现的表现会是这样的：")]),t._v(" "),v("ul",[v("li",[t._v("--soft：我们对 README 的更改状态现在变成已被提交至暂存区，也就是上面 2 的步骤。")]),t._v(" "),v("li",[t._v("--mixed： 我们对 README 的更改变成还未被提交至暂存区，也就是上面 1 的步骤。")]),t._v(" "),v("li",[t._v("--hard：我们对 README 的所有更改全没了，git log 中也找不到我们对 README 刚刚那次修改的痕迹。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"/img/git-command-2.png",alt:"git 暂存区和工作区"}})]),t._v(" "),v("h2",{attrs:{id:"git-reflog"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-reflog"}},[t._v("#")]),t._v(" git reflog")]),t._v(" "),v("p",[t._v("查看所有 git 操作记录，包括提交，回退等等")]),t._v(" "),v("h2",{attrs:{id:"git-revert"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),v("p",[t._v("回退某次 commit 提交的内容，和 reset 的区别是会产生新的 commit")]),t._v(" "),v("h2",{attrs:{id:"git-cherry-pick"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick"}},[t._v("#")]),t._v(" git cherry-pick")]),t._v(" "),v("p",[t._v("将指定提交合并到当前分支")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git cherry-pick master commitId1 commitId2 commitId4")]),t._v(" 将 master 上的提交 1,2,4 合并到当前分支")])]),t._v(" "),v("h2",{attrs:{id:"git-tag"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-tag"}},[t._v("#")]),t._v(" git tag")]),t._v(" "),v("p",[t._v("打标签")]),t._v(" "),v("h3",{attrs:{id:"轻量标签"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#轻量标签"}},[t._v("#")]),t._v(" 轻量标签")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git tag v1.0.0")])])]),t._v(" "),v("h3",{attrs:{id:"附注标签"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#附注标签"}},[t._v("#")]),t._v(" 附注标签")]),t._v(" "),v("ul",[v("li",[v("code",[t._v('git tag -a v1.0.1 -m "发布正式版 1.0.1"')])])]),t._v(" "),v("blockquote",[v("p",[t._v("附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。")])]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git push origin tagName")]),t._v("：推送标签")]),t._v(" "),v("li",[v("code",[t._v("git tag")]),t._v("：查看标签")]),t._v(" "),v("li",[v("code",[t._v("git tag -l v1.0.1")]),t._v("：筛选标签")]),t._v(" "),v("li",[v("code",[t._v("git tag -d v1.0.1")]),t._v("：删除标签")]),t._v(" "),v("li",[v("code",[t._v("git push origin --delete v1.0.2")]),t._v("：删除远程标签")]),t._v(" "),v("li",[v("code",[t._v("git push origin :refs/tags/v1.0.1")]),t._v("：删除远程标签，将“:”前面空值替换到远程")])]),t._v(" "),v("h2",{attrs:{id:"git-rebase"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),v("p",[t._v("类比 merge，合并两个分支，相同的提交只保留一个，并且不会产生新的提交记录。")]),t._v(" "),v("h3",{attrs:{id:"参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://juejin.cn/post/7131713973572861966",target:"_blank",rel:"noopener noreferrer"}},[t._v("女朋友说 Git 玩不明白，怎么办？安排！"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);i.default=e.exports}}]);